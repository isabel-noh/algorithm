# # BOJ 11722 가장 긴 감소하는 부분 수열
# ![BOJ 11722 가장 긴 감소하는 부분 수열](https://www.acmicpc.net/problem/11722)

# 문제
# 수열 A가 주어졌을 때, 가장 긴 감소하는 부분 수열을 구하는 프로그램을 작성하시오.

# 예를 들어, 수열 A = {10, 30, 10, 20, 20, 10} 인 경우에 가장 긴 감소하는 부분 수열은 A = {10, '30', 10, '20', 20, '10'}  이고, 길이는 3이다.

# 입력
# 첫째 줄에 수열 A의 크기 N (1 ≤ N ≤ 1,000)이 주어진다.

# 둘째 줄에는 수열 A를 이루고 있는 Ai가 주어진다. (1 ≤ Ai ≤ 1,000)

# 출력
# 첫째 줄에 수열 A의 가장 긴 감소하는 부분 수열의 길이를 출력한다.

# 문제풀이
# 이중for문으로 현재 위치의 값과 그 앞의 값들을 비교한다. 
# 앞의 값들 중에서 현재위치의 값보다 큰 값이 있다면, dp의 해당 인덱스의 값+1과 현재 dp값을 비교하여 더 큰 값을 현재 dp값으로 한다. 
# dp 값들 중에서 최종적으로 제일 큰 값을 return 한다. 
# 증가하는 부분 수열 문제에서는 현재 인덱스 값이 앞의 인덱스 값보다 크면 dp값을 증가시키면 된다. 
import sys
sys.stdin = open('sample.txt')

n = int(input())
arr = list(map(int, input().split()))
dp = [1] * n # len(arr)이 1일 경우는 길이가 1이므로 1로 초기화 합니다. 


for i in range(n): # 앞에서부터 체크
    for j in range(i): # i보다 앞의 숫자들과 비교
        if (arr[i] < arr[j]): # 앞의 숫자들 중 현재 i값보다 큰 값이 있으면 
            dp[i] = max(dp[i], dp[j]+1)  # dp[i]는 dp[i] && 현재 값보다 큰 값인 idx의 dp값에 +1한 값 중 더 큰 값  => 앞의 값들 중에서 나보다 큰 값의 dp값 중 max+1이 들어오게 됨
            print(dp[i], dp[j]+1)
print(max(dp)+1)
